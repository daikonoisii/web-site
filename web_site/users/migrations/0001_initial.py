# Generated by Django 2.0.13 on 2019-03-31 21:09

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='半角英数字とアンダースコアで入力してください．（3文字以上，15文字以内）', regex='[A-Za-z0-9_]{1,15}')], verbose_name='ユーザID')),
                ('first_name', models.CharField(blank=True, max_length=30, validators=[django.core.validators.RegexValidator(message='全角文字と半角スペースで入力してください．', regex='^[^\\x01-\\x7E ]+$')], verbose_name='名')),
                ('last_name', models.CharField(blank=True, max_length=150, validators=[django.core.validators.RegexValidator(message='全角文字と半角スペースで入力してください．', regex='^[^\\x01-\\x7E ]+$')], verbose_name='姓')),
                ('first_name_kana', models.CharField(blank=True, help_text='全角カタカナと半角スペースで入力してください．', max_length=30, validators=[django.core.validators.RegexValidator(message='姓名(フリガナ)は，全角カタカナと半角スペースで入力してください．', regex='^[\\u30A1-\\u30F4 ]+$')], verbose_name='名(フリガナ)')),
                ('last_name_kana', models.CharField(blank=True, help_text='全角カタカナと半角スペースで入力してください．', max_length=150, validators=[django.core.validators.RegexValidator(message='姓名(フリガナ)は，全角カタカナと半角スペースで入力してください．', regex='^[\\u30A1-\\u30F4 ]+$')], verbose_name='姓(フリガナ)')),
                ('first_name_eng', models.CharField(help_text='半角英字と半角スペースで，最初の文字を大文字にして入力してください．', max_length=30, validators=[django.core.validators.RegexValidator(message='姓名(英語)は，半角英字と半角スペースで，最初の文字を大文字にして入力してください．', regex='^[A-Z][a-z]+(| [A-Za-z]*)$')], verbose_name='名(英語)')),
                ('last_name_eng', models.CharField(help_text='半角英字と半角スペースで，最初の文字を大文字にして入力してください．', max_length=150, validators=[django.core.validators.RegexValidator(message='姓名(英語)は，半角英字と半角スペースで，最初の文字を大文字にして入力してください．', regex='^[A-Z][a-z]+(| [A-Za-z]*)$')], verbose_name='姓(英語)')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'USER',
                'verbose_name_plural': 'USER',
            },
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='タイトル')),
                ('winner', models.TextField(max_length=200, verbose_name='受賞者リスト')),
                ('org', models.CharField(max_length=100, verbose_name='授与機関')),
                ('date', models.DateField(verbose_name='受賞年月日')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('student_id', models.CharField(blank=True, default='', help_text='大学における学籍番号を記入してください．', max_length=8, validators=[django.core.validators.RegexValidator(message='8桁の半角英数字で入力してください．', regex='[0-9]{8,8}')], verbose_name='学籍番号')),
                ('status', models.IntegerField(blank=True, choices=[(1, 'B3'), (2, 'B4'), (11, 'M1'), (12, 'M2'), (21, 'D1'), (22, 'D2'), (23, 'D3'), (31, '学部卒業'), (32, '修士修了'), (33, '博士修了'), (71, '短期留学生 在籍中'), (72, '短期留学生 在籍期間終了'), (91, '休学'), (92, '退学')], default=1, help_text='現在の状態を選択してください．', null=True, verbose_name='状態')),
                ('graduation_year', models.IntegerField(blank=True, default=None, help_text='卒業・修了・退学の(予定)年度を入力してください．', null=True, validators=[django.core.validators.MinValueValidator(2010, message='2010年度より前の年度は入力できません．'), django.core.validators.MaxValueValidator(2060, message='2060年度より先の年度は入力できません．')], verbose_name='卒業・修了(予定)年度')),
                ('graduation_month', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11)], default=3, help_text='卒業・修了・退学の(予定)月を入力してください．', null=True, verbose_name='卒業・修了(予定)月')),
                ('alma_mater', models.CharField(blank=True, default='', help_text='出身の高校，高専，大学を入力してください．短期留学性は元々の所属大学を入力してください．', max_length=150, verbose_name='出身校')),
                ('company', models.CharField(blank=True, default='', help_text='就職先が決まったら就職先の会社名を入力してください．', max_length=150, verbose_name='就職先')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='user_private', serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=('users.user',),
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('ieice_id', models.CharField(blank=True, default='', help_text='電子情報通信学会の会員番号を入力してください．', max_length=7, validators=[django.core.validators.RegexValidator(message='7桁の半角英数字で入力してください．', regex='[0-9]{7,7}')], verbose_name='電子情報通信学会 会員番号')),
            ],
            options={
                'abstract': False,
            },
            bases=('users.user',),
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='award',
            name='user',
            field=models.ManyToManyField(default=None, related_name='data', to=settings.AUTH_USER_MODEL, verbose_name='研究室内受賞者'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='StudentPrivate',
            fields=[
                ('student_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='users.Student')),
                ('email', models.EmailField(blank=True, help_text='学外のメールアドレスがあれば入力してください．[教員以外には非公開]', max_length=254, verbose_name='メールアドレス')),
                ('phone_number', models.CharField(blank=True, default='', help_text='ハイフン抜きの半角数字の列で入力してください．[教員以外には非公開]', max_length=15, validators=[django.core.validators.RegexValidator(message='携帯電話番号は，ハイフン抜き15桁以上の半角数字の列で入力してください．', regex='^[+0-9]+$')], verbose_name='携帯電話番号')),
                ('scholarship', models.BooleanField(default=False, help_text='日本学生支援機構の奨学金を大学院で取得している場合はチェックを入れてください．[教員以外には非公開]', verbose_name='奨学金')),
            ],
            options={
                'abstract': False,
            },
            bases=('users.student',),
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
    ]
